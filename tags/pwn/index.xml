<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pwn on CUEH ComSec</title><link>https://cov-comsec.github.io/tags/pwn/</link><description>Recent content in Pwn on CUEH ComSec</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 10 Nov 2021 14:06:28 +0000</lastBuildDate><atom:link href="https://cov-comsec.github.io/tags/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>Walkthrough: Shellcoding Challenges</title><link>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding_walkthrough/</link><pubDate>Sun, 07 Nov 2021 10:40:28 +0100</pubDate><guid>https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding_walkthrough/</guid><description>&lt;p&gt;As promised by Ben in &lt;a href="https://cov-comsec.github.io/posts/2021_assembly_and_shellcoding/" target="_blank" rel="noopener noreffer"&gt;Assembly &amp;amp; Shellcoding&lt;/a&gt;, this article will cover the solutions for the Shellcode challenges. The challenges can be found on CTFd and is strongly recommended to try to solve the challenges on your own before continue reading this article!&lt;/p&gt;
&lt;h2 id="preparation-for-the-challenges"&gt;Preparation for the challenges&lt;/h2&gt;
&lt;p&gt;Each of the following challenges will require you to send your already assembled code to the target; whose ip address and port is specified in the description of each challenge on CTFd.
The file &amp;lsquo;boilerplate.py&amp;rsquo; was kindly provided and its purpose is to help assemble your code, connect to the host and inject the payload; all you have to do it insert your assembly code where required and type the ip address and port number of the target inside the brackets of the p.remote() method.&lt;/p&gt;</description></item></channel></rss>